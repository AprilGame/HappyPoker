/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Account : AccountBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Account.def
	// Please inherit and implement "class Account : AccountBase"
	public abstract class AccountBase : Entity
	{
		public EntityBaseEntityCall_AccountBase baseEntityCall = null;
		public EntityCellEntityCall_AccountBase cellEntityCall = null;

		public FRIENDLIST friendList = new FRIENDLIST();
		public virtual void onFriendListChanged(FRIENDLIST oldValue) {}
		public Int32 playerBean = 0;
		public virtual void onPlayerBeanChanged(Int32 oldValue) {}
		public ENTITYDATA playerData = new ENTITYDATA();
		public virtual void onPlayerDataChanged(ENTITYDATA oldValue) {}
		public UInt16 playerId = 0;
		public virtual void onPlayerIdChanged(UInt16 oldValue) {}
		public string playerName = "";
		public virtual void onPlayerNameChanged(string oldValue) {}
		public Byte playerNew = 1;
		public virtual void onPlayerNewChanged(Byte oldValue) {}
		public POKERLIST playerPoker = new POKERLIST();
		public virtual void onPlayerPokerChanged(POKERLIST oldValue) {}
		public Byte roomIndex = 0;
		public virtual void onRoomIndexChanged(Byte oldValue) {}

		public abstract void displayPoker(POKERLIST arg1); 
		public abstract void friendListData(FRIENDDATALIST arg1); 
		public abstract void initGamePoker(); 
		public abstract void loadLandlordPoker(SByte arg1, POKERLIST arg2); 
		public abstract void notifyToCallLandlord(); 
		public abstract void notifyToPlayPoker(SByte arg1); 
		public abstract void passPoker(); 
		public abstract void playPokerFailed(); 
		public abstract void playerReadyGame(SByte arg1, SByte arg2); 
		public abstract void playerToLandlord(SByte arg1, SByte arg2); 
		public abstract void pokerGameOver(Int32 arg1); 
		public abstract void receiveMail(MAILDATA arg1); 
		public abstract void returnErrorMessage(SByte arg1); 
		public abstract void stayInRoom(Int32 arg1); 

		public AccountBase()
		{
		}

		public override void onComponentsEnterworld()
		{
		}

		public override void onComponentsLeaveworld()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AccountBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AccountBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void attachComponents()
		{
		}

		public override void detachComponents()
		{
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.usePropertyDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
			}

			if(sm.useMethodDescrAlias)
			{
				methodUtype = stream.readUint8();
			}
			else
			{
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				case 33:
					POKERLIST displayPoker_arg1 = ((DATATYPE_POKERLIST)method.args[0]).createFromStreamEx(stream);
					displayPoker(displayPoker_arg1);
					break;
				case 37:
					FRIENDDATALIST friendListData_arg1 = ((DATATYPE_FRIENDDATALIST)method.args[0]).createFromStreamEx(stream);
					friendListData(friendListData_arg1);
					break;
				case 26:
					initGamePoker();
					break;
				case 31:
					SByte loadLandlordPoker_arg1 = stream.readInt8();
					POKERLIST loadLandlordPoker_arg2 = ((DATATYPE_POKERLIST)method.args[1]).createFromStreamEx(stream);
					loadLandlordPoker(loadLandlordPoker_arg1, loadLandlordPoker_arg2);
					break;
				case 27:
					notifyToCallLandlord();
					break;
				case 28:
					SByte notifyToPlayPoker_arg1 = stream.readInt8();
					notifyToPlayPoker(notifyToPlayPoker_arg1);
					break;
				case 34:
					passPoker();
					break;
				case 32:
					playPokerFailed();
					break;
				case 29:
					SByte playerReadyGame_arg1 = stream.readInt8();
					SByte playerReadyGame_arg2 = stream.readInt8();
					playerReadyGame(playerReadyGame_arg1, playerReadyGame_arg2);
					break;
				case 30:
					SByte playerToLandlord_arg1 = stream.readInt8();
					SByte playerToLandlord_arg2 = stream.readInt8();
					playerToLandlord(playerToLandlord_arg1, playerToLandlord_arg2);
					break;
				case 35:
					Int32 pokerGameOver_arg1 = stream.readInt32();
					pokerGameOver(pokerGameOver_arg1);
					break;
				case 36:
					MAILDATA receiveMail_arg1 = ((DATATYPE_MAILDATA)method.args[0]).createFromStreamEx(stream);
					receiveMail(receiveMail_arg1);
					break;
				case 25:
					SByte returnErrorMessage_arg1 = stream.readInt8();
					returnErrorMessage(returnErrorMessage_arg1);
					break;
				case 38:
					Int32 stayInRoom_arg1 = stream.readInt32();
					stayInRoom(stayInRoom_arg1);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 8:
						FRIENDLIST oldval_friendList = friendList;
						friendList = ((DATATYPE_FRIENDLIST)EntityDef.id2datatypes[24]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onFriendListChanged(oldval_friendList);
						}
						else
						{
							if(inWorld)
								onFriendListChanged(oldval_friendList);
						}

						break;
					case 3:
						Int32 oldval_playerBean = playerBean;
						playerBean = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								onPlayerBeanChanged(oldval_playerBean);
						}
						else
						{
							if(inWorld)
								onPlayerBeanChanged(oldval_playerBean);
						}

						break;
					case 6:
						ENTITYDATA oldval_playerData = playerData;
						playerData = ((DATATYPE_ENTITYDATA)EntityDef.id2datatypes[25]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onPlayerDataChanged(oldval_playerData);
						}
						else
						{
							if(inWorld)
								onPlayerDataChanged(oldval_playerData);
						}

						break;
					case 2:
						UInt16 oldval_playerId = playerId;
						playerId = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onPlayerIdChanged(oldval_playerId);
						}
						else
						{
							if(inWorld)
								onPlayerIdChanged(oldval_playerId);
						}

						break;
					case 1:
						string oldval_playerName = playerName;
						playerName = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onPlayerNameChanged(oldval_playerName);
						}
						else
						{
							if(inWorld)
								onPlayerNameChanged(oldval_playerName);
						}

						break;
					case 4:
						Byte oldval_playerNew = playerNew;
						playerNew = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onPlayerNewChanged(oldval_playerNew);
						}
						else
						{
							if(inWorld)
								onPlayerNewChanged(oldval_playerNew);
						}

						break;
					case 7:
						POKERLIST oldval_playerPoker = playerPoker;
						playerPoker = ((DATATYPE_POKERLIST)EntityDef.id2datatypes[23]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onPlayerPokerChanged(oldval_playerPoker);
						}
						else
						{
							if(inWorld)
								onPlayerPokerChanged(oldval_playerPoker);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 5:
						Byte oldval_roomIndex = roomIndex;
						roomIndex = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onRoomIndexChanged(oldval_roomIndex);
						}
						else
						{
							if(inWorld)
								onRoomIndexChanged(oldval_roomIndex);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			FRIENDLIST oldval_friendList = friendList;
			Property prop_friendList = pdatas[4];
			if(prop_friendList.isBase())
			{
				if(inited && !inWorld)
					onFriendListChanged(oldval_friendList);
			}
			else
			{
				if(inWorld)
				{
					if(prop_friendList.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onFriendListChanged(oldval_friendList);
					}
				}
			}

			Int32 oldval_playerBean = playerBean;
			Property prop_playerBean = pdatas[5];
			if(prop_playerBean.isBase())
			{
				if(inited && !inWorld)
					onPlayerBeanChanged(oldval_playerBean);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerBean.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerBeanChanged(oldval_playerBean);
					}
				}
			}

			ENTITYDATA oldval_playerData = playerData;
			Property prop_playerData = pdatas[6];
			if(prop_playerData.isBase())
			{
				if(inited && !inWorld)
					onPlayerDataChanged(oldval_playerData);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerData.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerDataChanged(oldval_playerData);
					}
				}
			}

			UInt16 oldval_playerId = playerId;
			Property prop_playerId = pdatas[7];
			if(prop_playerId.isBase())
			{
				if(inited && !inWorld)
					onPlayerIdChanged(oldval_playerId);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerId.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerIdChanged(oldval_playerId);
					}
				}
			}

			string oldval_playerName = playerName;
			Property prop_playerName = pdatas[8];
			if(prop_playerName.isBase())
			{
				if(inited && !inWorld)
					onPlayerNameChanged(oldval_playerName);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerName.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerNameChanged(oldval_playerName);
					}
				}
			}

			Byte oldval_playerNew = playerNew;
			Property prop_playerNew = pdatas[9];
			if(prop_playerNew.isBase())
			{
				if(inited && !inWorld)
					onPlayerNewChanged(oldval_playerNew);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerNew.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerNewChanged(oldval_playerNew);
					}
				}
			}

			POKERLIST oldval_playerPoker = playerPoker;
			Property prop_playerPoker = pdatas[10];
			if(prop_playerPoker.isBase())
			{
				if(inited && !inWorld)
					onPlayerPokerChanged(oldval_playerPoker);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerPoker.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerPokerChanged(oldval_playerPoker);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			Byte oldval_roomIndex = roomIndex;
			Property prop_roomIndex = pdatas[11];
			if(prop_roomIndex.isBase())
			{
				if(inited && !inWorld)
					onRoomIndexChanged(oldval_roomIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_roomIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoomIndexChanged(oldval_roomIndex);
					}
				}
			}

		}
	}
}